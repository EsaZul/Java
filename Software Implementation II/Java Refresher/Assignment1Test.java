package assignment1;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.*;
import org.junit.Test;


import static assignment1.Problem1.problem1;
import static assignment1.Problem2.problem2;
import static assignment1.Problem3.problem3;

public class Assignment1Test {

    public boolean compareArrays(String[] correct, String[] o){
        for (int i = 0; i < o.length && i < correct.length; i++)
            if (!((o[i].equals(correct[i]))))
                return false;

        if(o.length > correct.length){
            if(!o[correct.length].equals("")){
                return false;
            }
        }
        return true;
    }

    @Test(timeout = 2000)
    public void maxNBase(){
        String s = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
        int n = 4;
        assertEquals(5832, problem1(n, s));
    }

    @Test(timeout = 2000)
    public void maxNZeroes(){
        String s
        int n = 4;
        assertEquals(729, problem1(n, s));
    }

    @Test(timeout = 2000)
    public void maxNLarge(){
        String s = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
        int n = 20;
        assertEquals(2143260000, problem1(n, s));
    }

    @Test(timeout = 2000)
    public void maxNLargeWith0(){
        String s = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441502215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
        int n = 20;
        assertEquals(2141044736, problem1(n, s));
    }

    @Test(timeout = 2000)
    public void ODWBase(){
        String s = "The wicked wizard's wily wraith garnishes his master`s pasta with garlic.";
        String[] solution = {"wizard's", "garnishes"};
        assertTrue(compareArrays(problem2(s), solution));
    }

    @Test(timeout = 2000)
    public void ODWGarbage(){
        String s = "The wicked wizard's wily wraith ga&&rn!@#ish./]es his master`s pasta with garlic.";
        String[] solution = {"wizard's", "ga&&rn!@#ish./]es"};
        assertTrue(compareArrays(problem2(s), solution));
    }

    @Test(timeout = 2000)
    public void ODWAllDW(){
        String s = "contented cookout mittens shadowing buzzy nutty pussy arrowy crusts cutout cutups drossy dryrot envoys flurry grouts growly grumpy motors moults mourns outset Pollux pursue putter quarry savory setups slumps slyest spunks squaws squint status stools stoves straws stress styles surely swirls Taurus thirty thorny toasty towers triply Tropez troths truism turkey Tyburn upsets xylose apropos arrests attunes Avernus awfully azurite";
        String[] solution = {"contented", "cookout", "mittens", "shadowing", "buzzy", "nutty", "pussy", "arrowy", "crusts", "cutout", "cutups", "drossy", "dryrot", "envoys", "flurry", "grouts", "growly", "grumpy", "motors", "moults", "mourns", "outset", "Pollux", "pursue", "putter", "quarry", "savory", "setups", "slumps", "slyest", "spunks", "squaws", "squint", "status", "stools", "stoves", "straws", "stress", "styles", "surely", "swirls", "Taurus", "thirty", "thorny", "toasty", "towers", "triply", "Tropez", "troths", "truism", "turkey", "Tyburn", "upsets", "xylose", "apropos", "arrests", "attunes", "Avernus", "awfully"};
        assertTrue(compareArrays(problem2(s), solution));
    }

    @Test(timeout = 2000)
    public void ODWNoDW(){
        String s = "There should be no ODW in this sentence at all, so don't worry k?";
        String[] solution = {};
        assertTrue(compareArrays(problem2(s), solution));
    }
}
